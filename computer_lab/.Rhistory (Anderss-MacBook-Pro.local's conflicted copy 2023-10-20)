save.image("AB332_lab_III.RData")
tinytex::install_tinytex()
isa.metadata<-read_tsv("https://raw.githubusercontent.com/krabberod/UNIS_AB332_2023/main/computer_lab/data/AB332metadata_v3.txt")
library(vegan)
library(tidyverse)
library(corrplot)
library(RcmdrMisc)
library(ggord)
load("AB332_lab_II.RData")
isa.metadata<-read_tsv("https://raw.githubusercontent.com/krabberod/UNIS_AB332_2023/main/computer_lab/data/AB332metadata_v3.txt")
isa.metadata
isa.metadata <- column_to_rownames(isa.metadata, var = "Sample_Name")
colnames(isa.metadata)
isa.metadata.simp <- isa.metadata[6:30,]
isa.metadata.simp
identical(colnames(otu.tab.red),rownames(isa.metadata.simp))
isa.metadata.cont <- isa.metadata.simp %>% dplyr::select("nitrate","phosphate","silicate","N_P","temp_25","sal_25","F_25","chla_GFF")
isa.metadata.cont.zscores <-scale(isa.metadata.cont, center = T, scale = T)
isa.metadata.cont.zscores[1:5,]
(env.corr.signif.adjust <- rcorr.adjust(as.matrix(isa.metadata.cont.zscores)))
env.corr.signif.r <- env.corr.signif.adjust$R$r
env.corr.signif.p <- env.corr.signif.adjust$P
# Edit the object to replace any "<" by "0" using the function "gsub"
env.corr.signif.p <- gsub("<","0", env.corr.signif.p)
# We modify the object to be numeric datatype.
# NB: the transformation is done so the matrix of p values can be read as numeric!
env.corr.signif.p <- apply(env.corr.signif.p, 2 ,as.numeric)
rownames(env.corr.signif.p) <- colnames(env.corr.signif.p)
corrplot(env.corr.signif.r , type="upper", order="hclust", p.mat = env.corr.signif.p, sig.level = 0.05,insig = "pch",hclust.method = c("average"), tl.cex= 0.8, tl.col="black", diag=F)
otu.tab.trans.ss.nozero.bray.nmds.envfit <- envfit(otu.tab.trans.ss.nozero.bray.nmds,
as.data.frame(isa.metadata.cont.zscores),  permu=999, na.rm=T, display ="sites")
otu.tab.trans.ss.nozero.bray.nmds.envfit
plot(otu.tab.trans.ss.nozero.bray.nmds, type="t", display="sites") # plot the samples
plot(otu.tab.trans.ss.nozero.bray.nmds.envfit) # plot all environmental vectors
plot(otu.tab.trans.ss.nozero.bray.nmds, type="t", display="sites") # plot the samples
plot(otu.tab.trans.ss.nozero.bray.nmds.envfit, p.max=0.01)
mod0.rarefaction <- capscale(otu.tab.trans.ss.nozero.bray ~ 1, as.data.frame(isa.metadata.cont.zscores))
mod0.rarefaction
mod1.rarefaction <- capscale(otu.tab.trans.ss.nozero.bray ~ ., as.data.frame(isa.metadata.cont.zscores))
mod1.rarefaction
ordistep(mod0.rarefaction, scope = formula(mod1.rarefaction), perm.max = 1000, direction="forward")
isa.rarified.db <- dbrda(formula = otu.tab.trans.ss.nozero.bray ~ silicate+temp_25+sal_25+F_25+phosphate, data = as.data.frame(isa.metadata.cont.zscores))
stats::screeplot(isa.rarified.db)
ggord(isa.rarified.db)
isa.rarified.db <- dbrda(formula = otu.tab.trans.ss.nozero.bray ~ silicate+temp_25+sal_25+F_25+phosphate, data = as.data.frame(isa.metadata.cont.zscores))
stats::screeplot(isa.rarified.db)
ggord(isa.rarified.db,xlims=c(-1.3,1.3), ylims=c(-1.5,1))
ggord(isa.rarified.db, isa.metadata.simp$seasons)
ggord(isa.rarified.db, as.factor(isa.metadata.simp$month))
ggord(isa.rarified.db, grp_in=as.factor(isa.metadata.simp$month), xlims=c(-1.3,1.3), ylims=c(-1.5,1.5))
save.image("AB332_lab_III.RData")
library(vegan)
library(tidyverse)
otu.tab <- read_tsv("https://raw.githubusercontent.com/krabberod/UNIS_AB332_2023/main/computer_lab/data/AB332_otutab_reduc3.txt")
head(otu.tab)
dim(otu.tab)
otu.tab[5:15, 1:5] # The first 10 rows, and the first 5 columns
otu.tab <- column_to_rownames(otu.tab, var = "OTUNumber")
head(rownames(otu.tab))
dim(otu.tab)
otu.tab.red <- otu.tab[, 6:30]
otu.tab.trans <- t(otu.tab.red)
otu.tab.trans[1:5, 1:5]
rowSums(otu.tab.trans)
head(colSums(otu.tab.trans)) # Too many to show them all.
?head
length(which(colSums(otu.tab.trans) == 0))
otu.tab.trans <- otu.tab.trans[, -(which(colSums(otu.tab.trans) == 0))]
length(which(colSums(otu.tab.trans) == 0))
length(which(colSums(otu.tab.trans) > 0))
richness <- estimateR(otu.tab.trans)
richness
rowSums(otu.tab.trans)
rarecurve(otu.tab.trans, step = 100, xlab = "Number of reads", ylab = "Richness", col = "blue")
accum.curve <- specaccum(otu.tab.trans, method = "collector")
plot(accum.curve)
plot(colSums(otu.tab.trans), log = "y", xlab = "Rank", ylab = "Abundance", pch = 19, cex = 0.5, col = "blue")
mod <- radfit(otu.tab.trans)
plot(mod)
mod.all <- radfit(colSums(otu.tab.trans))
plot(mod.all)
preston <- prestonfit(colSums(otu.tab.trans))
preston.dist <- prestondistr(colSums(otu.tab.trans))
plot(preston)
lines(preston.dist, line.col = "blue3")
veiledspec(preston)
veiledspec(preston.dist)
H <- diversity(otu.tab.trans, index = "shannon")
H
plot(H, type = "l", col = "blue")
J <- H / log(rowSums(otu.tab.trans > 0))
inv.simpson <- diversity(otu.tab.trans, "invsimpson")
plot(inv.simpson, type = "l", col = "blue")
min(rowSums(otu.tab.trans)) # We calculate the sample with the minimum amount of reads
otu.tab.trans.ss <- rrarefy(otu.tab.trans, min(rowSums(otu.tab.trans))) # Samples are rarefied to lowest number of reads
rowSums(otu.tab.trans.ss)
dim(otu.tab.trans)
dim(otu.tab.trans.ss)
length(which(colSums(otu.tab.trans) == 0))
length(which(colSums(otu.tab.trans.ss) == 0))
head(which(colSums(otu.tab.trans.ss) == 0)) # Show the OTUs and the position in the table that have 0 abundance for the first OTUs
colnames(otu.tab.trans)[13]
otu.tab.trans[, 13] # This gives the abundance of the OTU1009  across the different samples in the table that is NOT subsampled
otu.tab.trans.ss[, 13] # # This gives the abundance of the OTU1009  across the different samples in the table that IS subsampled
otu.tab.trans.ss.nozero <- otu.tab.trans.ss[, -(which(colSums(otu.tab.trans.ss) == 0))] # Removes OTUs with zero abundance
length(which(colSums(otu.tab.trans.ss.nozero) == 0)) # Check that no zero abundance OTUs are left
dim(otu.tab.trans.ss)
dim(otu.tab.trans.ss.nozero)
otu.tab.trans.ss.nozero.bray <- vegdist(otu.tab.trans.ss.nozero, method = "bray")
as.matrix(otu.tab.trans.ss.nozero.bray)[1:5, 1:5]
save.image("AB332_lab_I.RData")
??cmultRepl
library(zCompositions)
install.packages(zCompositions)
install.packages("zCompositions")
library(vegan)
library(tidyverse)
library(zCompositions)
library(vegan)
library(tidyverse)
library(zCompositions)
otu.tab <- read_tsv("https://raw.githubusercontent.com/krabberod/UNIS_AB332_2023/main/computer_lab/data/AB332_otutab_reduc3.txt")
head(otu.tab)
dim(otu.tab)
otu.tab[5:15, 1:5] # The first 10 rows, and the first 5 columns
otu.tab <- column_to_rownames(otu.tab, var = "OTUNumber")
head(rownames(otu.tab))
dim(otu.tab)
otu.tab.red <- otu.tab[, 6:30]
otu.tab.trans <- t(otu.tab.red)
otu.tab.trans[1:5, 1:5]
rowSums(otu.tab.trans)
head(colSums(otu.tab.trans)) # Too many to show them all.
?head
length(which(colSums(otu.tab.trans) == 0))
otu.tab.trans <- otu.tab.trans[, -(which(colSums(otu.tab.trans) == 0))]
length(which(colSums(otu.tab.trans) == 0))
length(which(colSums(otu.tab.trans) > 0))
richness <- estimateR(otu.tab.trans)
richness
rowSums(otu.tab.trans)
rarecurve(otu.tab.trans, step = 100, xlab = "Number of reads", ylab = "Richness", col = "blue")
accum.curve <- specaccum(otu.tab.trans, method = "collector")
plot(accum.curve)
plot(colSums(otu.tab.trans), log = "y", xlab = "Rank", ylab = "Abundance", pch = 19, cex = 0.5, col = "blue")
mod <- radfit(otu.tab.trans)
plot(mod)
mod.all <- radfit(colSums(otu.tab.trans))
plot(mod.all)
preston <- prestonfit(colSums(otu.tab.trans))
preston.dist <- prestondistr(colSums(otu.tab.trans))
plot(preston)
lines(preston.dist, line.col = "blue3")
veiledspec(preston)
veiledspec(preston.dist)
H <- diversity(otu.tab.trans, index = "shannon")
H
plot(H, type = "l", col = "blue")
J <- H / log(rowSums(otu.tab.trans > 0))
inv.simpson <- diversity(otu.tab.trans, "invsimpson")
plot(inv.simpson, type = "l", col = "blue")
min(rowSums(otu.tab.trans)) # We calculate the sample with the minimum amount of reads
otu.tab.trans.ss <- rrarefy(otu.tab.trans, min(rowSums(otu.tab.trans))) # Samples are rarefied to lowest number of reads
rowSums(otu.tab.trans.ss)
dim(otu.tab.trans)
dim(otu.tab.trans.ss)
length(which(colSums(otu.tab.trans) == 0))
length(which(colSums(otu.tab.trans.ss) == 0))
head(which(colSums(otu.tab.trans.ss) == 0)) # Show the OTUs and the position in the table that have 0 abundance for the first OTUs
colnames(otu.tab.trans)[13]
otu.tab.trans[, 13] # This gives the abundance of the OTU1009  across the different samples in the table that is NOT subsampled
otu.tab.trans.ss[, 13] # # This gives the abundance of the OTU1009  across the different samples in the table that IS subsampled
otu.tab.trans.ss.nozero <- otu.tab.trans.ss[, -(which(colSums(otu.tab.trans.ss) == 0))] # Removes OTUs with zero abundance
length(which(colSums(otu.tab.trans.ss.nozero) == 0)) # Check that no zero abundance OTUs are left
dim(otu.tab.trans.ss)
dim(otu.tab.trans.ss.nozero)
otu.tab.trans.ss.nozero.bray <- vegdist(otu.tab.trans.ss.nozero, method = "bray")
as.matrix(otu.tab.trans.ss.nozero.bray)[1:5, 1:5]
save.image("AB332_lab_I.RData")
clr
??clr
library(compositions)
library(vegan)
library(tidyverse)
otu.tab <- read_tsv("https://raw.githubusercontent.com/krabberod/UNIS_AB332_2023/main/computer_lab/data/AB332_otutab_reduc3.txt")
head(otu.tab)
dim(otu.tab)
otu.tab[5:15, 1:5] # The first 10 rows, and the first 5 columns
otu.tab <- column_to_rownames(otu.tab, var = "OTUNumber")
head(rownames(otu.tab))
dim(otu.tab)
otu.tab.red <- otu.tab[, 6:30]
otu.tab.trans <- t(otu.tab.red)
otu.tab.trans[1:5, 1:5]
rowSums(otu.tab.trans)
head(colSums(otu.tab.trans)) # Too many to show them all.
?head
length(which(colSums(otu.tab.trans) == 0))
otu.tab.trans <- otu.tab.trans[, -(which(colSums(otu.tab.trans) == 0))]
length(which(colSums(otu.tab.trans) == 0))
length(which(colSums(otu.tab.trans) > 0))
richness <- estimateR(otu.tab.trans)
richness
rowSums(otu.tab.trans)
rarecurve(otu.tab.trans, step = 100, xlab = "Number of reads", ylab = "Richness", col = "blue")
accum.curve <- specaccum(otu.tab.trans, method = "collector")
plot(accum.curve)
plot(colSums(otu.tab.trans), log = "y", xlab = "Rank", ylab = "Abundance", pch = 19, cex = 0.5, col = "blue")
mod <- radfit(otu.tab.trans)
plot(mod)
mod.all <- radfit(colSums(otu.tab.trans))
plot(mod.all)
preston <- prestonfit(colSums(otu.tab.trans))
preston.dist <- prestondistr(colSums(otu.tab.trans))
plot(preston)
lines(preston.dist, line.col = "blue3")
veiledspec(preston)
veiledspec(preston.dist)
H <- diversity(otu.tab.trans, index = "shannon")
H
plot(H, type = "l", col = "blue")
J <- H / log(rowSums(otu.tab.trans > 0))
inv.simpson <- diversity(otu.tab.trans, "invsimpson")
plot(inv.simpson, type = "l", col = "blue")
min(rowSums(otu.tab.trans)) # We calculate the sample with the minimum amount of reads
otu.tab.trans.ss <- rrarefy(otu.tab.trans, min(rowSums(otu.tab.trans))) # Samples are rarefied to lowest number of reads
rowSums(otu.tab.trans.ss)
dim(otu.tab.trans)
dim(otu.tab.trans.ss)
length(which(colSums(otu.tab.trans) == 0))
length(which(colSums(otu.tab.trans.ss) == 0))
head(which(colSums(otu.tab.trans.ss) == 0)) # Show the OTUs and the position in the table that have 0 abundance for the first OTUs
colnames(otu.tab.trans)[13]
otu.tab.trans[, 13] # This gives the abundance of the OTU1009  across the different samples in the table that is NOT subsampled
otu.tab.trans.ss[, 13] # # This gives the abundance of the OTU1009  across the different samples in the table that IS subsampled
otu.tab.trans.ss.nozero <- otu.tab.trans.ss[, -(which(colSums(otu.tab.trans.ss) == 0))] # Removes OTUs with zero abundance
length(which(colSums(otu.tab.trans.ss.nozero) == 0)) # Check that no zero abundance OTUs are left
dim(otu.tab.trans.ss)
dim(otu.tab.trans.ss.nozero)
otu.tab.trans.ss.nozero.bray <- vegdist(otu.tab.trans.ss.nozero, method = "bray")
as.matrix(otu.tab.trans.ss.nozero.bray)[1:5, 1:5]
save.image("AB332_lab_I.RData")
# library(vegan)
# library(tidyverse)
# library(PCAtools)
# library(mixOmics)
# library(ape)
# library(recluster)
# library(dendextend)
load("AB332_lab_I.RData")
otu.tab.trans.ss.nozero.pca <- PCAtools::pca(t(otu.tab.trans.ss.nozero), scale = FALSE) # Runs de PCA
biplot(otu.tab.trans.ss.nozero.pca, showLoadings = T, lab = rownames(otu.tab.trans.ss.nozero)) # Plots de PCA
??biplot
# library(vegan)
# library(tidyverse)
library(PCAtools)
# library(mixOmics)
# library(ape)
# library(recluster)
# library(dendextend)
load("AB332_lab_I.RData")
otu.tab.trans.ss.nozero.pca <- PCAtools::pca(t(otu.tab.trans.ss.nozero), scale = FALSE) # Runs de PCA
biplot(otu.tab.trans.ss.nozero.pca, showLoadings = T, lab = rownames(otu.tab.trans.ss.nozero)) # Plots de PCA
screeplot(otu.tab.trans.ss.nozero.pca, axisLabSize = 18, titleLabSize = 22) # We plot the percentage of variance explained by each axis
set.seed(666) # Set a seed to make results reproducible
NMDS.scree <- function(x) { # x is the name of the distance matrix
plot(rep(1, 7), replicate(7, metaMDS(x, autotransform = FALSE, k = 1)$stress), xlim = c(1, 7), ylim = c(0, 0.30), xlab = "# of Dimensions", ylab = "Stress", main = "NMDS stress plot")
for (i in 1:7) {
points(rep(i + 1, 7), replicate(7, metaMDS(x, autotransform = FALSE, k = i + 1)$stress))
}
}
NMDS.scree(otu.tab.trans.ss.nozero.bray)
??metaMDS
library(vegan)
library(tidyverse)
library(PCAtools)
# library(mixOmics)
# library(ape)
# library(recluster)
# library(dendextend)
library(vegan)
library(tidyverse)
library(PCAtools)
# library(mixOmics)
# library(ape)
# library(recluster)
# library(dendextend)
load("AB332_lab_I.RData")
otu.tab.trans.ss.nozero.pca <- PCAtools::pca(t(otu.tab.trans.ss.nozero), scale = FALSE) # Runs de PCA
biplot(otu.tab.trans.ss.nozero.pca, showLoadings = T, lab = rownames(otu.tab.trans.ss.nozero)) # Plots de PCA
screeplot(otu.tab.trans.ss.nozero.pca, axisLabSize = 18, titleLabSize = 22) # We plot the percentage of variance explained by each axis
set.seed(666) # Set a seed to make results reproducible
NMDS.scree <- function(x) { # x is the name of the distance matrix
plot(rep(1, 7), replicate(7, metaMDS(x, autotransform = FALSE, k = 1)$stress), xlim = c(1, 7), ylim = c(0, 0.30), xlab = "# of Dimensions", ylab = "Stress", main = "NMDS stress plot")
for (i in 1:7) {
points(rep(i + 1, 7), replicate(7, metaMDS(x, autotransform = FALSE, k = i + 1)$stress))
}
}
NMDS.scree(otu.tab.trans.ss.nozero.bray)
otu.tab.trans.ss.nozero.bray.nmds <- metaMDS(otu.tab.trans.ss.nozero, k = 2, trymax = 100, trace = FALSE, autotransform = FALSE, distance = "bray")
otu.tab.trans.ss.nozero.bray.nmds
stressplot(otu.tab.trans.ss.nozero.bray.nmds)
plot(otu.tab.trans.ss.nozero.bray.nmds, display = "sites", type = "n")
points(otu.tab.trans.ss.nozero.bray.nmds, display = "sites", col = "red", pch = 19)
text(otu.tab.trans.ss.nozero.bray.nmds, display = "sites")
isa.metadata <- read_tsv("https://raw.githubusercontent.com/krabberod/UNIS_AB332_2022/main/computer_lab/data/AB332metadata_v3.txt")
isa.metadata <- column_to_rownames(isa.metadata, var = "Sample_Name")
isa.metadata.simp <- isa.metadata[6:30, ]
otu.tab.trans.ss.nozero.bray.nmds.scores <- as.data.frame(scores(otu.tab.trans.ss.nozero.bray.nmds)$sites)
otu.tab.trans.ss.nozero.bray.nmds.scores$season <- isa.metadata.simp$seasons
otu.tab.trans.ss.nozero.bray.nmds.scores$month <- as.factor(isa.metadata.simp$month)
otu.tab.trans.ss.nozero.bray.nmds.scores$samples <- rownames(otu.tab.trans.ss.nozero.bray.nmds.scores)
ggplot(otu.tab.trans.ss.nozero.bray.nmds.scores) +
geom_point(mapping = aes(x = NMDS1, y = NMDS2, colour = season), size = 3) +
coord_fixed() + ## need aspect ratio of 1!
geom_text_repel(
box.padding = 0.5, aes(x = NMDS1, y = NMDS2, label = samples),
size = 3
)
otu.tab.trans.ss.nozero.bray.upgma <- recluster.cons(otu.tab.trans.ss.nozero.bray, tr = 100, p = 0.5, method = "average")
library(vegan)
library(tidyverse)
library(PCAtools)
# library(mixOmics)
# library(ape)
library(recluster)
# library(dendextend)
load("AB332_lab_I.RData")
otu.tab.trans.ss.nozero.pca <- PCAtools::pca(t(otu.tab.trans.ss.nozero), scale = FALSE) # Runs de PCA
biplot(otu.tab.trans.ss.nozero.pca, showLoadings = T, lab = rownames(otu.tab.trans.ss.nozero)) # Plots de PCA
screeplot(otu.tab.trans.ss.nozero.pca, axisLabSize = 18, titleLabSize = 22) # We plot the percentage of variance explained by each axis
set.seed(666) # Set a seed to make results reproducible
NMDS.scree <- function(x) { # x is the name of the distance matrix
plot(rep(1, 7), replicate(7, metaMDS(x, autotransform = FALSE, k = 1)$stress), xlim = c(1, 7), ylim = c(0, 0.30), xlab = "# of Dimensions", ylab = "Stress", main = "NMDS stress plot")
for (i in 1:7) {
points(rep(i + 1, 7), replicate(7, metaMDS(x, autotransform = FALSE, k = i + 1)$stress))
}
}
NMDS.scree(otu.tab.trans.ss.nozero.bray)
otu.tab.trans.ss.nozero.bray.nmds <- metaMDS(otu.tab.trans.ss.nozero, k = 2, trymax = 100, trace = FALSE, autotransform = FALSE, distance = "bray")
otu.tab.trans.ss.nozero.bray.nmds
stressplot(otu.tab.trans.ss.nozero.bray.nmds)
plot(otu.tab.trans.ss.nozero.bray.nmds, display = "sites", type = "n")
points(otu.tab.trans.ss.nozero.bray.nmds, display = "sites", col = "red", pch = 19)
text(otu.tab.trans.ss.nozero.bray.nmds, display = "sites")
isa.metadata <- read_tsv("https://raw.githubusercontent.com/krabberod/UNIS_AB332_2022/main/computer_lab/data/AB332metadata_v3.txt")
isa.metadata <- column_to_rownames(isa.metadata, var = "Sample_Name")
isa.metadata.simp <- isa.metadata[6:30, ]
otu.tab.trans.ss.nozero.bray.nmds.scores <- as.data.frame(scores(otu.tab.trans.ss.nozero.bray.nmds)$sites)
otu.tab.trans.ss.nozero.bray.nmds.scores$season <- isa.metadata.simp$seasons
otu.tab.trans.ss.nozero.bray.nmds.scores$month <- as.factor(isa.metadata.simp$month)
otu.tab.trans.ss.nozero.bray.nmds.scores$samples <- rownames(otu.tab.trans.ss.nozero.bray.nmds.scores)
ggplot(otu.tab.trans.ss.nozero.bray.nmds.scores) +
geom_point(mapping = aes(x = NMDS1, y = NMDS2, colour = season), size = 3) +
coord_fixed() + ## need aspect ratio of 1!
geom_text_repel(
box.padding = 0.5, aes(x = NMDS1, y = NMDS2, label = samples),
size = 3
)
otu.tab.trans.ss.nozero.bray.upgma <- recluster.cons(otu.tab.trans.ss.nozero.bray, tr = 100, p = 0.5, method = "average")
plot(otu.tab.trans.ss.nozero.bray.upgma$cons) # plot consensus tree
otu.tab.trans.ss.nozero.bray.upgma.boot <- recluster.boot(otu.tab.trans.ss.nozero.bray.upgma$cons, otu.tab.trans.ss.nozero, tr = 100, p = 0.5, method = "average", boot = 1000, level = 1)
recluster.plot(otu.tab.trans.ss.nozero.bray.upgma$cons, otu.tab.trans.ss.nozero.bray.upgma.boot, direction="left") # We add bootstrap values to the branching pattern
save.image("AB332_lab_II.RData")
otu.tab <- read_tsv("https://raw.githubusercontent.com/krabberod/UNIS_AB332_2023/main/computer_lab/data/AB332_otutab_reduc3.txt")
library(vegan)
library(tidyverse)
otu.tab <- read_tsv("https://raw.githubusercontent.com/krabberod/UNIS_AB332_2023/main/computer_lab/data/AB332_otutab_reduc3.txt")
head(otu.tab)
dim(otu.tab)
otu.tab[5:15, 1:5] # The first 10 rows, and the first 5 columns
otu.tab <- column_to_rownames(otu.tab, var = "OTUNumber")
head(rownames(otu.tab))
dim(otu.tab)
otu.tab.red <- otu.tab[, 6:30]
otu.tab.trans <- t(otu.tab.red)
otu.tab.trans[1:5, 1:5]
rowSums(otu.tab.trans)
head(colSums(otu.tab.trans)) # Too many to show them all.
?head
length(which(colSums(otu.tab.trans) == 0))
otu.tab.trans <- otu.tab.trans[, -(which(colSums(otu.tab.trans) == 0))]
length(which(colSums(otu.tab.trans) == 0))
length(which(colSums(otu.tab.trans) > 0))
richness <- estimateR(otu.tab.trans)
richness
rowSums(otu.tab.trans)
rarecurve(otu.tab.trans, step = 100, xlab = "Number of reads", ylab = "Richness", col = "blue")
accum.curve <- specaccum(otu.tab.trans, method = "collector")
plot(accum.curve)
plot(colSums(otu.tab.trans), log = "y", xlab = "Rank", ylab = "Abundance", pch = 19, cex = 0.5, col = "blue")
mod <- radfit(otu.tab.trans)
plot(mod)
mod.all <- radfit(colSums(otu.tab.trans))
plot(mod.all)
preston <- prestonfit(colSums(otu.tab.trans))
preston.dist <- prestondistr(colSums(otu.tab.trans))
plot(preston)
lines(preston.dist, line.col = "blue3")
veiledspec(preston)
veiledspec(preston.dist)
H <- diversity(otu.tab.trans, index = "shannon")
H
plot(H, type = "l", col = "blue")
J <- H / log(rowSums(otu.tab.trans > 0))
inv.simpson <- diversity(otu.tab.trans, "invsimpson")
plot(inv.simpson, type = "l", col = "blue")
min(rowSums(otu.tab.trans)) # We calculate the sample with the minimum amount of reads
otu.tab.trans.ss <- rrarefy(otu.tab.trans, min(rowSums(otu.tab.trans))) # Samples are rarefied to lowest number of reads
rowSums(otu.tab.trans.ss)
dim(otu.tab.trans)
dim(otu.tab.trans.ss)
length(which(colSums(otu.tab.trans) == 0))
length(which(colSums(otu.tab.trans.ss) == 0))
head(which(colSums(otu.tab.trans.ss) == 0)) # Show the OTUs and the position in the table that have 0 abundance for the first OTUs
colnames(otu.tab.trans)[13]
otu.tab.trans[, 13] # This gives the abundance of the OTU1009  across the different samples in the table that is NOT subsampled
otu.tab.trans.ss[, 13] # # This gives the abundance of the OTU1009  across the different samples in the table that IS subsampled
otu.tab.trans.ss.nozero <- otu.tab.trans.ss[, -(which(colSums(otu.tab.trans.ss) == 0))] # Removes OTUs with zero abundance
length(which(colSums(otu.tab.trans.ss.nozero) == 0)) # Check that no zero abundance OTUs are left
dim(otu.tab.trans.ss)
dim(otu.tab.trans.ss.nozero)
otu.tab.trans.ss.nozero.bray <- vegdist(otu.tab.trans.ss.nozero, method = "bray")
as.matrix(otu.tab.trans.ss.nozero.bray)[1:5, 1:5]
save.image("AB332_lab_I.RData")
library(vegan)
library(tidyverse)
otu.tab <- read_tsv("https://raw.githubusercontent.com/krabberod/UNIS_AB332_2023/main/computer_lab/data/AB332_otutab_reduc3.txt")
head(otu.tab)
dim(otu.tab)
otu.tab[5:15, 1:5] # The first 10 rows, and the first 5 columns
otu.tab <- column_to_rownames(otu.tab, var = "OTUNumber")
head(rownames(otu.tab))
dim(otu.tab)
otu.tab.red <- otu.tab[, 6:30]
otu.tab.trans <- t(otu.tab.red)
otu.tab.trans[1:5, 1:5]
rowSums(otu.tab.trans)
head(colSums(otu.tab.trans)) # Too many to show them all.
?head
length(which(colSums(otu.tab.trans) == 0))
otu.tab.trans <- otu.tab.trans[, -(which(colSums(otu.tab.trans) == 0))]
length(which(colSums(otu.tab.trans) == 0))
length(which(colSums(otu.tab.trans) > 0))
rowSums(otu.tab.trans)
rarecurve(otu.tab.trans, step = 100, xlab = "Number of reads", ylab = "Richness", col = "blue")
accum.curve <- specaccum(otu.tab.trans, method = "collector")
plot(accum.curve)
richness <- estimateR(otu.tab.trans)
richness
plot(colSums(otu.tab.trans), log = "y", xlab = "Rank", ylab = "Abundance", pch = 19, cex = 0.5, col = "blue")
mod <- radfit(otu.tab.trans)
plot(mod)
mod.all <- radfit(colSums(otu.tab.trans))
plot(mod.all)
preston <- prestonfit(colSums(otu.tab.trans))
preston.dist <- prestondistr(colSums(otu.tab.trans))
plot(preston)
lines(preston.dist, line.col = "blue3")
veiledspec(preston)
veiledspec(preston.dist)
H <- diversity(otu.tab.trans, index = "shannon")
H
plot(H, type = "l", col = "blue")
J <- H / log(rowSums(otu.tab.trans > 0))
inv.simpson <- diversity(otu.tab.trans, "invsimpson")
plot(inv.simpson, type = "l", col = "blue")
min(rowSums(otu.tab.trans)) # We calculate the sample with the minimum amount of reads
otu.tab.trans.ss <- rrarefy(otu.tab.trans, min(rowSums(otu.tab.trans))) # Samples are rarefied to lowest number of reads
rowSums(otu.tab.trans.ss)
dim(otu.tab.trans)
dim(otu.tab.trans.ss)
length(which(colSums(otu.tab.trans) == 0))
length(which(colSums(otu.tab.trans.ss) == 0))
head(which(colSums(otu.tab.trans.ss) == 0)) # Show the OTUs and the position in the table that have 0 abundance for the first OTUs
colnames(otu.tab.trans)[13]
otu.tab.trans[, 13] # This gives the abundance of the OTU1009  across the different samples in the table that is NOT subsampled
otu.tab.trans.ss[, 13] # # This gives the abundance of the OTU1009  across the different samples in the table that IS subsampled
otu.tab.trans.ss.nozero <- otu.tab.trans.ss[, -(which(colSums(otu.tab.trans.ss) == 0))] # Removes OTUs with zero abundance
length(which(colSums(otu.tab.trans.ss.nozero) == 0)) # Check that no zero abundance OTUs are left
dim(otu.tab.trans.ss)
dim(otu.tab.trans.ss.nozero)
otu.tab.trans.ss.nozero.bray <- vegdist(otu.tab.trans.ss.nozero, method = "bray")
as.matrix(otu.tab.trans.ss.nozero.bray)[1:5, 1:5]
save.image("AB332_lab_I.RData")
?estimateR
richness <- estimateR(otu.tab.trans)
richness
richness <- estimateR(otu.tab.trans, smallsample = TRUE)
richness
richness <- estimateR(otu.tab.trans[,1], smallsample = TRUE)
richness
richness <- estimateR(otu.tab.trans[1,], smallsample = TRUE)
richness
veiledspec(preston)
veiledspec(preston.dist)
veiledspec(preston)
veiledspec(preston.dist)
H <- diversity(otu.tab.trans, index = "shannon")
H
plot(H, type = "l", col = "blue")
J <- H / log(rowSums(otu.tab.trans > 0))
J
plot(J)
min(rowSums(otu.tab.trans)) # We calculate the sample with the minimum amount of reads
otu.tab.trans.ss <- rrarefy(otu.tab.trans, min(rowSums(otu.tab.trans))) # Samples are rarefied to lowest number of reads
rowSums(otu.tab.trans.ss)
dim(otu.tab.trans)
dim(otu.tab.trans.ss)
length(which(colSums(otu.tab.trans) == 0))
length(which(colSums(otu.tab.trans.ss) == 0))
head(which(colSums(otu.tab.trans.ss) == 0)) # Show the OTUs and the position in the table that have 0 abundance for the first OTUs
